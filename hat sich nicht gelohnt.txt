module.exports = {
    name: "guildCreate",
    async execute (guild) {
        const channelID = '1081562460248617001'
        async function sendMessage(channelID) {
            const button = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                .setCustomId('deleteNew')
                .setLabel('ğŸ—‘')
                .setStyle(ButtonStyle.Danger)
            );

            const Embed = new EmbedBuilder()
            .setColor("Blurple")
            .setTitle('Danke fÃ¼r das HinzufÃ¼gen! ğŸ˜‰')
            .setDescription(`Danke dir fÃ¼r das einladen auf dein Server-- ${guild.name}. Ich bin hier um zu helfen. \\n **um ein Bug zu reporten benutze den Command** /report (bug)`)
            .setFooter({text: 'Du kannst die Nachricht auch lÃ¶schen in dem du auf den Knopf unten DrÃ¼ckst'})

            const sendChannel = await guild.channels.cache.get(channelID);
            var msg = await sendChannel.send({ embeds: [Embed] , components: [button]});

            const collector = await msg.createMessageComponentCollector();
            collector.on('collect', async i => {
                if (i.customId == 'deleteNew') {
                    await msg.delete();
                }
            });
        }
    }
}

if(all == true) {
                        interaction.reply({content: `MÃ¶chtest du wirklich die Person **${interaction.guildId}** zuspammen ?`, ephemeral: true, components: [buttonRow]})
                    
                        const collector = interaction.channel.createMessageComponentCollector();
    
                        collector.on('collect', async i => {
                            interaction.deleteReply()
                            i.reply({content: `Die Nachricht **${nachricht}** wurde an ${interaction.guildId} gesendet!`, ephemeral: true})

                            allmembers => {
                                if(wie === null){
                                    client.users.send(userID, nachricht);
                                    }else if(wie > 0) {
                                       for (let i = 0; i < wie; i++) {
                                          client.users.send(userID, nachricht);
                                        }
                                    }
                            }


    
                            client.users.send('756581554074943649' , `**${username}** (**ID**:** ${senderid}**, **Sender Displayname**: **${sender.displayName}**) hat die Nachricht: **${nachricht}** an **${userID.globalName}** (**ID**: **${userID.id}**, **DisplayName**: **${userID.displayName}**) gesendet! *(**${wie}** mal geschickt)*`);
                        console.log(`**${username}** (**ID**:** ${senderid}**, **Sender Displayname**: **${sender.displayName}**) hat die Nachricht: **${nachricht}** an **${userID.globalName}** (**ID**: **${userID.id}**, **DisplayName**: **${userID.displayName}**) gesendet! *(**${wie}** mal geschickt)*`);
                        })

                    }else {







const { options } = interaction;
            const sub = options.getSubcommand;
            var data = await inbox.find({User: interaction.user.id});
            
            async function sendMessage (message) {
                const embed = new EmbedBuilder()
                .setColor('Blurple')
                .setDescription(message);

                await interaction.reply({embeds: [embed], ephemeral: true });

            }
                
                switch (sub) {
                    case 'get':
                        if (data.length == 0) {
                            await sendMessage('âš  Du hast nicht in deiner inbox...');
                        }else {
                            var string = `ğŸ“¬ **Your Inbox**`;
                            await data.array.forEach(element => {
                                string += `\n\n> Message Content: ${value.Message} `
                            });
                        }
                }